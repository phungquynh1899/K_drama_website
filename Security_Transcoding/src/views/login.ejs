<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ƒêƒÉng nh·∫≠p - Video Website</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="icon" type="image/x-icon" href="/images/favicon.ico">
    <meta name="description" content="ƒêƒÉng nh·∫≠p v√†o Video Website">
    <meta name="keywords" content="ƒëƒÉng nh·∫≠p, login, video website">
    <style>
        .auth-container {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 20px;
        }
        
        .auth-card {
            background: #1a1a1a;
            border-radius: 15px;
            padding: 2rem;
            width: 100%;
            max-width: 400px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }
        
        .auth-header {
            text-align: center;
            margin-bottom: 2rem;
        }
        
        .auth-header h1 {
            color: #ffd700;
            font-size: 2rem;
            margin-bottom: 0.5rem;
        }
        
        .auth-header p {
            color: #888;
        }
        
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            color: #ffffff;
            font-weight: 500;
        }
        
        .form-input {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #333;
            border-radius: 8px;
            background: #0f0f0f;
            color: #ffffff;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }
        
        .form-input:focus {
            outline: none;
            border-color: #ffd700;
        }
        
        .form-input::placeholder {
            color: #666;
        }
        
        .auth-btn {
            width: 100%;
            padding: 12px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 8px;
            color: #ffffff;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.3s ease;
        }
        
        .auth-btn:hover {
            transform: translateY(-2px);
        }
        
        .auth-links {
            text-align: center;
            margin-top: 1.5rem;
        }
        
        .auth-links a {
            color: #ffd700;
            text-decoration: none;
            margin: 0 10px;
        }
        
        .auth-links a:hover {
            text-decoration: underline;
        }
        
        .error-message {
            background: #ff4444;
            color: #ffffff;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 1rem;
            text-align: center;
        }
        
        .success-message {
            background: #44ff44;
            color: #000000;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 1rem;
            text-align: center;
        }
        
        .back-home {
            text-align: center;
            margin-top: 1rem;
        }
        
        .back-home a {
            color: #888;
            text-decoration: none;
        }
        
        .back-home a:hover {
            color: #ffd700;
        }
        
        .password-container {
            position: relative;
        }
        
        .password-toggle {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: #888;
            cursor: pointer;
            font-size: 16px;
        }
        
        .loading {
            opacity: 0.7;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <div class="auth-container">
        <div class="auth-card">
            <div class="auth-header">
                <h1>ƒêƒÉng nh·∫≠p</h1>
                <p>Ch√†o m·ª´ng b·∫°n tr·ªü l·∫°i!</p>
            </div>
            
            <% if (typeof error !== 'undefined' && error) { %>
                <div class="error-message">
                    <%= error %>
                </div>
            <% } %>
            
            <% if (typeof success !== 'undefined' && success) { %>
                <div class="success-message">
                    <%= success %>
                </div>
            <% } %>
            
            <form id="loginForm" method="POST" action="javascript:void(0);" onsubmit="return false;">
                <div class="form-group">
                    <label for="email" class="form-label">Email</label>
                    <input 
                        type="email" 
                        id="email" 
                        name="email" 
                        class="form-input" 
                        placeholder="Nh·∫≠p email c·ªßa b·∫°n"
                        required
                        value="<%= locals.email || '' %>"
                    >
                </div>
                
                <div class="form-group">
                    <label for="password" class="form-label">M·∫≠t kh·∫©u</label>
                    <div class="password-container">
                        <input 
                            type="password" 
                            id="password" 
                            name="password" 
                            class="form-input" 
                            placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                            required
                        >
                        <button type="button" class="password-toggle" onclick="togglePassword()">üëÅ</button>
                    </div>
                </div>
                
                <div class="form-group" style="display: flex; align-items: center; gap: 10px;">
                    <input 
                        type="checkbox" 
                        id="remember" 
                        name="remember"
                        style="width: auto;"
                    >
                    <label for="remember" class="form-label" style="margin: 0; font-size: 14px;">
                        Ghi nh·ªõ ƒëƒÉng nh·∫≠p
                    </label>
                </div>
                
                <button type="button" class="auth-btn" id="loginBtn">
                    ƒêƒÉng nh·∫≠p
                </button>
            </form>
            
            <div class="auth-links">
                <a href="/auth/register">Ch∆∞a c√≥ t√†i kho·∫£n? ƒêƒÉng k√Ω</a>
                <br>
                <a href="/auth/forgot-password">Qu√™n m·∫≠t kh·∫©u?</a>
            </div>
            
            <div class="back-home">
                <a href="/">‚Üê V·ªÅ trang ch·ªß</a>
            </div>
        </div>
    </div>

    <script>
        // Token management utilities
        const TokenManager = {
            // Store tokens securely
            setTokens(accessToken, refreshToken, remember = false) {
                if (remember) {
                    // Store in localStorage for persistent login
                    localStorage.setItem('accessToken', accessToken);
                    localStorage.setItem('refreshToken', refreshToken);
                    localStorage.setItem('tokenExpiry', Date.now() + (3 * 24 * 60 * 60 * 1000)); // 3 days
                } else {
                    // Store in sessionStorage for session-only login
                    sessionStorage.setItem('accessToken', accessToken);
                    sessionStorage.setItem('refreshToken', refreshToken);
                    sessionStorage.setItem('tokenExpiry', Date.now() + (3 * 24 * 60 * 60 * 1000)); // 3 days
                }
            },

            // Get current access token
            getAccessToken() {
                return localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');
            },

            // Get refresh token
            getRefreshToken() {
                return localStorage.getItem('refreshToken') || sessionStorage.getItem('refreshToken');
            },

            // Check if token is expired
            isTokenExpired() {
                const expiry = localStorage.getItem('tokenExpiry') || sessionStorage.getItem('tokenExpiry');
                return expiry && Date.now() > parseInt(expiry);
            },

            // Clear all tokens
            clearTokens() {
                localStorage.removeItem('accessToken');
                localStorage.removeItem('refreshToken');
                localStorage.removeItem('tokenExpiry');
                sessionStorage.removeItem('accessToken');
                sessionStorage.removeItem('refreshToken');
                sessionStorage.removeItem('tokenExpiry');
            },

            // Refresh access token
            async refreshAccessToken() {
                const refreshToken = this.getRefreshToken();
                if (!refreshToken) {
                    throw new Error('No refresh token available');
                }

                try {
                    const response = await fetch('/api/v1/auth/refreshToken', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ refreshToken })
                    });

                    if (!response.ok) {
                        throw new Error('Failed to refresh token');
                    }

                    const result = await response.json();
                    const newAccessToken = result.metadata.accessToken;
                    
                    // Update the stored access token
                    if (localStorage.getItem('accessToken')) {
                        localStorage.setItem('accessToken', newAccessToken);
                        localStorage.setItem('tokenExpiry', Date.now() + (3 * 24 * 60 * 60 * 1000));
                    } else {
                        sessionStorage.setItem('accessToken', newAccessToken);
                        sessionStorage.setItem('tokenExpiry', Date.now() + (3 * 24 * 60 * 60 * 1000));
                    }

                    return newAccessToken;
                } catch (error) {
                    console.error('Token refresh failed:', error);
                    this.clearTokens();
                    throw error;
                }
            }
        };

        // Toggle password visibility
        function togglePassword() {
            const passwordInput = document.getElementById('password');
            const toggleButton = document.querySelector('.password-toggle');
            
            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                toggleButton.innerHTML = 'üôà';
            } else {
                passwordInput.type = 'password';
                toggleButton.innerHTML = 'üëÅ';
            }
        }

        // Show error message
        function showError(message) {
            const existingError = document.querySelector('.error-message');
            if (existingError) {
                existingError.remove();
            }
            
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error-message';
            errorDiv.textContent = message;
            
            const form = document.getElementById('loginForm');
            form.parentElement.insertBefore(errorDiv, form);
        }

        // Show success message
        function showSuccess(message) {
            const existingSuccess = document.querySelector('.success-message');
            if (existingSuccess) {
                existingSuccess.remove();
            }
            
            const successDiv = document.createElement('div');
            successDiv.className = 'success-message';
            successDiv.textContent = message;
            
            const form = document.getElementById('loginForm');
            form.parentElement.insertBefore(successDiv, form);
        }

        // Form validation and submission
        document.getElementById('loginBtn').addEventListener('click', async function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            const email = document.getElementById('email').value.trim();
            const password = document.getElementById('password').value.trim();
            const remember = document.getElementById('remember').checked;
            
            // Clear previous error messages
            const existingError = document.querySelector('.error-message');
            if (existingError) {
                existingError.remove();
            }
            
            // Validation
            if (!email) {
                showError('Vui l√≤ng nh·∫≠p email');
                document.getElementById('email').focus();
                return;
            }
            
            if (!isValidEmail(email)) {
                showError('Email kh√¥ng h·ª£p l·ªá');
                document.getElementById('email').focus();
                return;
            }
            
            if (!password) {
                showError('Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u');
                document.getElementById('password').focus();
                return;
            }
            
            if (password.length < 6) {
                showError('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
                document.getElementById('password').focus();
                return;
            }
            
            // Show loading state
            const loginBtn = document.getElementById('loginBtn');
            loginBtn.textContent = 'ƒêang ƒëƒÉng nh·∫≠p...';
            loginBtn.classList.add('loading');
            
            try {
                console.log('Sending login request to:', '/api/v1/auth/login');
                const response = await fetch('/api/v1/auth/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ email, password })
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    // Store tokens
                    TokenManager.setTokens(
                        result.metadata.accessToken, 
                        result.metadata.refreshToken, 
                        remember
                    );
                    
                    showSuccess('ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Chuy·ªÉn h∆∞·ªõng ƒë·∫øn dashboard...');
                    
                    // Redirect to dashboard after 2 seconds
                    setTimeout(() => {
                        window.location.href = '/dashboard';
                    }, 2000);
                } else {
                    showError(result.error || 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng');
                }
            } catch (error) {
                showError('C√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß');
            } finally {
                // Reset button state
                loginBtn.textContent = 'ƒêƒÉng nh·∫≠p';
                loginBtn.classList.remove('loading');
            }
        });
        
        function isValidEmail(email) {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return emailRegex.test(email);
        }
        
        // Auto-focus on email field
        document.getElementById('email').focus();
    </script>
</body>
</html> 