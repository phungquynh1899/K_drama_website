<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Upload Series Episode - Video Website</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="icon" type="image/x-icon" href="/images/favicon.ico">
    <meta name="description" content="Upload series episode lên Video Website">
    <meta name="keywords" content="upload series, tải lên phim bộ">
    <style>
        .upload-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .upload-header {
            text-align: center;
            margin-bottom: 2rem;
        }
        
        .upload-header h1 {
            color: #ffd700;
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
        }
        
        .upload-header p {
            color: #888;
            font-size: 1.1rem;
        }
        
        .upload-form {
            background: #1a1a1a;
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }
        
        .form-section {
            margin-bottom: 2rem;
        }
        
        .form-section h3 {
            color: #ffd700;
            margin-bottom: 1rem;
            border-bottom: 2px solid #333;
            padding-bottom: 0.5rem;
        }
        
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }
        
        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            color: #ffffff;
            font-weight: 500;
        }
        
        .form-input {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #333;
            border-radius: 8px;
            background: #0f0f0f;
            color: #ffffff;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }
        
        .form-input:focus {
            outline: none;
            border-color: #ffd700;
        }
        
        .form-input::placeholder {
            color: #666;
        }
        
        .form-textarea {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #333;
            border-radius: 8px;
            background: #0f0f0f;
            color: #ffffff;
            font-size: 16px;
            min-height: 120px;
            resize: vertical;
            transition: border-color 0.3s ease;
        }
        
        .form-textarea:focus {
            outline: none;
            border-color: #ffd700;
        }
        
        .form-select {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #333;
            border-radius: 8px;
            background: #0f0f0f;
            color: #ffffff;
            font-size: 16px;
            cursor: pointer;
        }
        
        .series-option-group {
            margin-bottom: 1.5rem;
        }
        
        .series-option {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .series-option input[type="radio"] {
            margin-right: 0.5rem;
        }
        
        .series-option label {
            color: #ffffff;
            cursor: pointer;
        }
        
        .series-input-group {
            margin-left: 1.5rem;
            padding-left: 1rem;
            border-left: 2px solid #333;
        }
        
        .file-upload-area {
            border: 2px dashed #333;
            border-radius: 10px;
            padding: 2rem;
            text-align: center;
            transition: border-color 0.3s ease;
            cursor: pointer;
        }
        
        .file-upload-area:hover {
            border-color: #ffd700;
        }
        
        .file-upload-area.dragover {
            border-color: #ffd700;
            background: rgba(255, 215, 0, 0.1);
        }
        
        .file-upload-icon {
            font-size: 3rem;
            color: #888;
            margin-bottom: 1rem;
        }
        
        .file-upload-text {
            color: #888;
            margin-bottom: 1rem;
        }
        
        .file-input {
            display: none;
        }
        
        .upload-btn {
            width: 100%;
            padding: 15px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 8px;
            color: #ffffff;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.3s ease;
        }
        
        .upload-btn:hover {
            transform: translateY(-2px);
        }
        
        .upload-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        
        .progress-bar {
            width: 100%;
            height: 10px;
            background: #333;
            border-radius: 5px;
            overflow: hidden;
            margin: 1rem 0;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            width: 0%;
            transition: width 0.3s ease;
        }
        
        .upload-status {
            text-align: center;
            margin: 1rem 0;
            padding: 1rem;
            border-radius: 8px;
        }
        
        .status-success {
            background: #44ff44;
            color: #000000;
        }
        
        .status-error {
            background: #ff4444;
            color: #ffffff;
        }
        
        .status-info {
            background: #4444ff;
            color: #ffffff;
        }
        
        .file-info {
            background: #0f0f0f;
            padding: 1rem;
            border-radius: 8px;
            margin-top: 1rem;
        }
        
        .file-info h4 {
            color: #ffd700;
            margin-bottom: 0.5rem;
        }
        
        .file-info p {
            color: #888;
            margin: 0.25rem 0;
        }
        
        .loading {
            text-align: center;
            color: #ffd700;
            margin: 1rem 0;
        }
        
        /* Upload dropdown styles */
        .upload-dropdown {
            position: relative;
        }

        .upload-toggle {
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .upload-submenu {
            position: absolute;
            top: 100%;
            left: 0;
            background: #1a1a1a;
            border-radius: 8px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            min-width: 180px;
            opacity: 0;
            visibility: hidden;
            transform: translateY(-10px);
            transition: all 0.3s ease;
            z-index: 1000;
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .upload-dropdown:hover .upload-submenu {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

        .upload-submenu li {
            margin: 0;
        }

        .upload-submenu a {
            display: block;
            padding: 0.75rem 1rem;
            color: #ffffff;
            text-decoration: none;
            transition: background 0.3s ease;
        }

        .upload-submenu a:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        @media (max-width: 768px) {
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .upload-container {
                padding: 1rem;
            }
            
            .upload-submenu {
                position: static;
                opacity: 1;
                visibility: visible;
                transform: none;
                background: transparent;
                box-shadow: none;
                margin-top: 0.5rem;
            }
            
            .upload-submenu a {
                padding: 0.5rem 1rem;
                color: #888;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="nav-container">
            <a href="/" class="logo">VideoWeb</a>
            <nav>
                <ul class="nav-menu">
                    <li><a href="/">Trang chủ</a></li>
                    <li><a href="/movies">Phim lẻ</a></li>
                    <li><a href="/series">Phim bộ</a></li>
                    <li><a href="/ranking">Xếp hạng</a></li>
                    <li><a href="/search">Tìm kiếm</a></li>
                    <li class="upload-dropdown">
                        <a href="#" class="upload-toggle" style="color: #ffd700;">Upload ▼</a>
                        <ul class="upload-submenu">
                            <li><a href="/upload">Upload Phim</a></li>
                            <li><a href="/uploadSeries" style="color: #ffd700;">Upload Phim Bộ</a></li>
                        </ul>
                    </li>
                </ul>
            </nav>
            <button id="mobileMenuBtn" class="mobile-menu-btn">☰</button>
        </div>
    </header>

    <!-- Main Content -->
    <main class="upload-container">
        <div class="upload-header">
            <h1>Upload Series Episode</h1>
            <p>Tải lên tập phim bộ của bạn để chia sẻ với cộng đồng</p>
        </div>
        
        <form id="uploadSeriesForm" class="upload-form" enctype="multipart/form-data">
            <!-- Series Information -->
            <div class="form-section">
                <h3>Thông tin series</h3>
                
                <div class="series-option-group">
                    <div class="series-option">
                        <input type="radio" id="newSeries" name="seriesOption" value="new" checked>
                        <label for="newSeries">Tạo series mới</label>
                    </div>
                    <div class="series-input-group" id="newSeriesInputs">
                        <div class="form-group">
                            <label for="seriesName" class="form-label">Tên series *</label>
                            <input 
                                type="text" 
                                id="seriesName" 
                                name="seriesName" 
                                class="form-input" 
                                placeholder="Nhập tên series"
                                required
                            >
                        </div>
                        <div class="form-group">
                            <label for="seriesDescription" class="form-label">Mô tả series</label>
                            <textarea 
                                id="seriesDescription" 
                                name="seriesDescription" 
                                class="form-textarea" 
                                placeholder="Mô tả series..."
                            ></textarea>
                        </div>
                        <div class="form-group">
                            <label for="totalEpisodes" class="form-label">Tổng số tập *</label>
                            <input 
                                type="number" 
                                id="totalEpisodes" 
                                name="totalEpisodes" 
                                class="form-input" 
                                placeholder="12"
                                min="2"
                                required
                            >
                            <small style="color: #666; font-size: 12px; margin-top: 0.25rem;">
                                Series phải có ít nhất 2 tập
                            </small>
                        </div>
                    </div>
                </div>
                
                <div class="series-option-group">
                    <div class="series-option">
                        <input type="radio" id="existingSeries" name="seriesOption" value="existing">
                        <label for="existingSeries">Chọn series có sẵn</label>
                    </div>
                    <div class="series-input-group" id="existingSeriesInputs" style="display: none;">
                        <div class="form-group">
                            <label for="seriesSelect" class="form-label">Chọn series *</label>
                            <select id="seriesSelect" name="seriesSelect" class="form-select" disabled>
                                <option value="">Đang tải danh sách series...</option>
                            </select>
                        </div>
                        <div id="seriesInfo" class="series-info" style="display: none;">
                            <h4 style="color: #ffd700; margin-bottom: 1rem;">Thông tin series</h4>
                            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; color: #888;">
                                <div>
                                    <p><strong>Tên series:</strong> <span id="selectedSeriesName"></span></p>
                                    <p><strong>Thể loại:</strong> <span id="selectedSeriesGenre"></span></p>
                                    <p><strong>Năm:</strong> <span id="selectedSeriesYear"></span></p>
                                </div>
                                <div>
                                    <p><strong>Quốc gia:</strong> <span id="selectedSeriesCountry"></span></p>
                                    <p><strong>Tổng số tập:</strong> <span id="selectedSeriesTotalEpisodes"></span></p>
                                    <p><strong>Đã upload:</strong> <span id="selectedSeriesUploadedEpisodes"></span></p>
                                </div>
                            </div>
                            <p style="margin-top: 1rem;"><strong>Mô tả:</strong> <span id="selectedSeriesDescription"></span></p>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Episode Information -->
            <div class="form-section">
                <h3>Thông tin tập phim</h3>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="episodeNumber" class="form-label">Số tập *</label>
                        <input 
                            type="number" 
                            id="episodeNumber" 
                            name="episodeNumber" 
                            class="form-input" 
                            placeholder="1"
                            min="1"
                            required
                        >
                        <small id="episodeNumberHelp" style="color: #666; font-size: 12px; margin-top: 0.25rem;">
                            Nhập số tập bạn muốn upload
                        </small>
                    </div>
                    
                    <div class="form-group">
                        <label for="title" class="form-label">Tiêu đề tập *</label>
                        <input 
                            type="text" 
                            id="title" 
                            name="title" 
                            class="form-input" 
                            placeholder="Nhập tiêu đề tập phim"
                            required
                        >
                    </div>
                </div>
                
                <!-- New Series Metadata (only shown for new series) -->
                <div id="newSeriesMetadata">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="year" class="form-label">Năm phát hành</label>
                            <input 
                                type="number" 
                                id="year" 
                                name="year" 
                                class="form-input" 
                                placeholder="2024"
                                min="1900"
                                max="2030"
                            >
                        </div>
                        
                        <div class="form-group">
                            <label for="genre" class="form-label">Thể loại *</label>
                            <select id="genre" name="genre" class="form-select">
                                <option value="">Chọn thể loại</option>
                                <option value="action">Hành động</option>
                                <option value="drama">Tâm lý</option>
                                <option value="comedy">Hài</option>
                                <option value="horror">Kinh dị</option>
                                <option value="romance">Lãng mạn</option>
                                <option value="sci-fi">Khoa học viễn tưởng</option>
                                <option value="thriller">Giật gân</option>
                                <option value="animation">Hoạt hình</option>
                                <option value="documentary">Tài liệu</option>
                                <option value="other">Khác</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="country" class="form-label">Quốc gia</label>
                            <select id="country" name="country" class="form-select">
                                <option value="">Chọn quốc gia</option>
                                <option value="us">Mỹ</option>
                                <option value="kr">Hàn Quốc</option>
                                <option value="jp">Nhật Bản</option>
                                <option value="cn">Trung Quốc</option>
                                <option value="vn">Việt Nam</option>
                                <option value="th">Thái Lan</option>
                                <option value="other">Khác</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="actors" class="form-label">Diễn viên</label>
                            <input 
                                type="text" 
                                id="actors" 
                                name="actors" 
                                class="form-input" 
                                placeholder="Diễn viên chính..."
                            >
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="description" class="form-label">Mô tả tập phim</label>
                        <textarea 
                            id="description" 
                            name="description" 
                            class="form-textarea" 
                            placeholder="Mô tả nội dung tập phim..."
                        ></textarea>
                    </div>
                </div>
                
                <!-- Existing Series Episode Info (only shown for existing series) -->
                <div id="existingSeriesEpisodeInfo" style="display: none;">
                    <div class="form-group">
                        <label for="episodeDescription" class="form-label">Mô tả tập phim (tùy chọn)</label>
                        <textarea 
                            id="episodeDescription" 
                            name="episodeDescription" 
                            class="form-textarea" 
                            placeholder="Mô tả nội dung tập phim..."
                        ></textarea>
                    </div>
                </div>
            </div>
            
            <!-- File Upload -->
            <div class="form-section">
                <h3>Tải lên file</h3>
                
                <div class="file-upload-area" id="fileUploadArea">
                    <div class="file-upload-icon">📁</div>
                    <div class="file-upload-text">
                        Kéo thả file video vào đây hoặc <strong>click để chọn file</strong>
                    </div>
                    <div style="color: #666; font-size: 14px;">
                        Hỗ trợ: MP4, AVI, MOV, MKV (Tối đa 2GB)
                    </div>
                    <input type="file" id="videoFile" name="videoFile" class="file-input" accept="video/*" required>
                </div>
                
                <div id="fileInfo" class="file-info" style="display: none;">
                    <h4>Thông tin file</h4>
                    <div id="fileDetails"></div>
                </div>
            </div>

             <!-- Series Thumbnail Upload (optional) -->
<div class="form-section">
    <h3>Ảnh bìa series (tùy chọn)</h3>
    <div class="file-upload-area" id="seriesThumbnailUploadArea">
        <div class="file-upload-icon">🖼️</div>
        <div class="file-upload-text">
            Kéo thả ảnh bìa vào đây hoặc <strong>click để chọn file</strong>
        </div>
        <div style="color: #666; font-size: 14px;">
            Hỗ trợ: JPG, PNG, GIF (Tối đa 5MB)
        </div>
        <input type="file" id="seriesThumbnailFile" name="seriesThumbnailFile" class="file-input" accept="image/*">
    </div>
    <div id="seriesThumbnailPreview" style="display:none; margin-top:1rem;">
        <img id="seriesThumbnailImg" src="" alt="Series Thumbnail Preview" style="max-width:200px; border-radius:8px;">
    </div>
</div>
            
            <!-- Upload Progress -->
            <div id="uploadProgress" style="display: none;">
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill"></div>
                </div>
                <div id="uploadStatus" class="upload-status status-info">
                    Đang chuẩn bị upload...
                </div>
            </div>
            
            <!-- Submit Button -->
            <button type="submit" class="upload-btn" id="submitBtn">
                Upload Episode
            </button>
        </form>
    </main>

    <!-- Footer -->
    <footer style="background: #1a1a1a; padding: 2rem 0; margin-top: 3rem; text-align: center; color: #888;">
        <div style="max-width: 1200px; margin: 0 auto; padding: 0 20px;">
            <p>&copy; 2025 Video Website. Tất cả quyền được bảo lưu.</p>
            <p style="margin-top: 1rem; font-size: 0.9rem;">
                Website chỉ phục vụ mục đích giải trí. Chúng tôi không sở hữu bất kỳ nội dung video nào.
            </p>
        </div>
    </footer>
    <script>
        window.UPLOAD_API_BASE_URL = "<%= UPLOAD_API_BASE_URL %>";
    </script>

    <script>
        // DOM elements
        const fileUploadArea = document.getElementById('fileUploadArea');
        const videoFileInput = document.getElementById('videoFile');
        const fileInfo = document.getElementById('fileInfo');
        const fileDetails = document.getElementById('fileDetails');
        const uploadProgress = document.getElementById('uploadProgress');
        const progressFill = document.getElementById('progressFill');
        const uploadStatus = document.getElementById('uploadStatus');
        const submitBtn = document.getElementById('submitBtn');
        const seriesSelect = document.getElementById('seriesSelect');
        const newSeriesInputs = document.getElementById('newSeriesInputs');
        const existingSeriesInputs = document.getElementById('existingSeriesInputs');
        
        // Series option handling
        document.querySelectorAll('input[name="seriesOption"]').forEach(radio => {
            radio.addEventListener('change', function() {
                if (this.value === 'new') {
                    // Show new series inputs
                    newSeriesInputs.style.display = 'block';
                    existingSeriesInputs.style.display = 'none';
                    document.getElementById('seriesName').required = true;
                    seriesSelect.required = false;
                    seriesSelect.disabled = true;
                    
                    // Show new series metadata
                    document.getElementById('newSeriesMetadata').style.display = 'block';
                    document.getElementById('existingSeriesEpisodeInfo').style.display = 'none';
                    
                    // Reset episode number validation
                    document.getElementById('episodeNumber').min = '1';
                    document.getElementById('episodeNumberHelp').textContent = 'Nhập số tập bạn muốn upload';
                    
                    // Make genre and total episodes required for new series
                    document.getElementById('genre').required = true;
                    document.getElementById('totalEpisodes').required = true;
                    
                    // Update episode number max based on total episodes
                    const totalEpisodes = document.getElementById('totalEpisodes').value;
                    if (totalEpisodes) {
                        document.getElementById('episodeNumber').max = totalEpisodes;
                        document.getElementById('episodeNumberHelp').textContent = `Series này có ${totalEpisodes} tập. Nhập số tập từ 1 đến ${totalEpisodes}`;
                    }
                    
                } else {
                    // Show existing series inputs
                    newSeriesInputs.style.display = 'none';
                    existingSeriesInputs.style.display = 'block';
                    document.getElementById('seriesName').required = false;
                    seriesSelect.required = true;
                    seriesSelect.disabled = false;
                    
                    // Hide new series metadata, show episode-only info
                    document.getElementById('newSeriesMetadata').style.display = 'none';
                    document.getElementById('existingSeriesEpisodeInfo').style.display = 'block';
                    
                    // Make genre and total episodes NOT required for existing series
                    document.getElementById('genre').required = false;
                    document.getElementById('totalEpisodes').required = false;
                }
            });
        });
        
        // Load user's series on page load
        window.addEventListener('load', async function() {
            await loadUserSeries();
        });
        
        // Load user's series
        async function loadUserSeries() {
            try {
                const userId = localStorage.getItem('userId');
                if (!userId) {
                    console.error('User ID not found');
                    return;
                }
                
                const response = await authFetch(`/api/v1/seriesInfo/user/${userId}`);
                if (response.ok) {
                    const series = await response.json();
                    populateSeriesSelect(series);
                } else {
                    console.error('Failed to load series');
                }
            } catch (error) {
                console.error('Error loading series:', error);
            }
        }
        
        // Populate series select dropdown
        function populateSeriesSelect(series) {
            seriesSelect.innerHTML = '<option value="">Chọn series</option>';
            series.forEach(s => {
                const option = document.createElement('option');
                option.value = s.id;
                option.textContent = s.name;
                option.dataset.series = JSON.stringify(s);
                seriesSelect.appendChild(option);
            });
        }
        
        // Handle series selection
        seriesSelect.addEventListener('change', function() {
            const selectedOption = this.options[this.selectedIndex];
            if (selectedOption.value) {
                const seriesData = JSON.parse(selectedOption.dataset.series);
                displaySeriesInfo(seriesData);
                updateEpisodeValidation(seriesData);
            } else {
                hideSeriesInfo();
            }
        });
        
        // Display series information
        function displaySeriesInfo(series) {
            document.getElementById('selectedSeriesName').textContent = series.name;
            document.getElementById('selectedSeriesGenre').textContent = series.genre || 'Chưa cập nhật';
            document.getElementById('selectedSeriesYear').textContent = series.year || 'Chưa cập nhật';
            document.getElementById('selectedSeriesCountry').textContent = series.country || 'Chưa cập nhật';
            document.getElementById('selectedSeriesTotalEpisodes').textContent = series.total_episodes || 'Chưa cập nhật';
            document.getElementById('selectedSeriesDescription').textContent = series.description || 'Chưa có mô tả';
            
            // Get uploaded episodes count
            getUploadedEpisodesCount(series.id).then(count => {
                document.getElementById('selectedSeriesUploadedEpisodes').textContent = count;
            });
            
            document.getElementById('seriesInfo').style.display = 'block';
        }
        
        // Hide series information
        function hideSeriesInfo() {
            document.getElementById('seriesInfo').style.display = 'none';
        }
        
        // Update episode number validation based on series
        function updateEpisodeValidation(series) {
            const episodeInput = document.getElementById('episodeNumber');
            const helpText = document.getElementById('episodeNumberHelp');
            const totalEpisodes = series.total_episodes || 1;
            
            episodeInput.max = totalEpisodes;
            helpText.textContent = `Series này có ${totalEpisodes} tập. Nhập số tập từ 1 đến ${totalEpisodes}`;
        }
        
        // Get uploaded episodes count for a series
        async function getUploadedEpisodesCount(seriesId) {
            try {
                const response = await authFetch(`/api/v1/seriesInfo/${seriesId}/episodes`);
                if (response.ok) {
                    const episodes = await response.json();
                    return episodes.length;
                }
            } catch (error) {
                console.error('Error getting episodes count:', error);
            }
            return 0;
        }
        
        // Handle total episodes input for new series
        document.getElementById('totalEpisodes').addEventListener('input', function() {
            const totalEpisodes = this.value;
            const episodeInput = document.getElementById('episodeNumber');
            const helpText = document.getElementById('episodeNumberHelp');
            
            if (totalEpisodes && totalEpisodes >= 2) {
                episodeInput.max = totalEpisodes;
                helpText.textContent = `Series này có ${totalEpisodes} tập. Nhập số tập từ 1 đến ${totalEpisodes}`;
            } else {
                episodeInput.max = '';
                helpText.textContent = 'Nhập số tập bạn muốn upload';
            }
        });
        
        // File upload handling
        fileUploadArea.addEventListener('click', () => videoFileInput.click());
        fileUploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            fileUploadArea.classList.add('dragover');
        });
        fileUploadArea.addEventListener('dragleave', () => {
            fileUploadArea.classList.remove('dragover');
        });
        fileUploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            fileUploadArea.classList.remove('dragover');
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                videoFileInput.files = files;
                handleFileSelect(files[0]);
            }
        });
        
        videoFileInput.addEventListener('change', (e) => {
            if (e.target.files.length > 0) {
                handleFileSelect(e.target.files[0]);
            }
        });
        
        function handleFileSelect(file) {
            const allowedExtensions = ['.mp4', '.avi', '.mov', '.mkv'];
            const fileName = file.name.toLowerCase();
            const hasValidExtension = allowedExtensions.some(ext => fileName.endsWith(ext));
            if (!hasValidExtension) {
                alert('Chỉ cho phép các định dạng video: mp4, avi, mov, mkv');
                return;
            }
            
            if (file.size > 2 * 1024 * 1024 * 1024) { // 2GB
                alert('File quá lớn. Vui lòng chọn file nhỏ hơn 2GB');
                return;
            }

            if (!file.type.startsWith('video/')) {
                alert('Vui lòng chọn file video hợp lệ');
                return;
            }

            const parts = fileName.split('.');
            if (parts.length > 2) {
                alert('Tên file không hợp lệ (không được có nhiều hơn một dấu chấm).');
                return;
            }
            
            const fileSize = (file.size / (1024 * 1024)).toFixed(2);
            const fileType = file.type;
            
            fileDetails.innerHTML = `
                <p><strong>Tên file:</strong> ${file.name}</p>
                <p><strong>Kích thước:</strong> ${fileSize} MB</p>
                <p><strong>Loại file:</strong> ${fileType}</p>
            `;
            
            fileInfo.style.display = 'block';
        }
        
        // Helper: get access token from localStorage
        function getAccessToken() {
            return localStorage.getItem('accessToken');
        }
        
        // Helper: get refresh token from localStorage
        function getRefreshToken() {
            return localStorage.getItem('refreshToken');
        }
        
        // Helper: refresh access token using refresh token
        async function refreshAccessToken() {
            const refreshToken = getRefreshToken();
            if (!refreshToken) return null;
            const res = await fetch('/api/v1/auth/refresh', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ refreshToken })
            });
            if (res.ok) {
                const data = await res.json();
                if (data.accessToken) {
                    localStorage.setItem('accessToken', data.accessToken);
                    return data.accessToken;
                }
            }
            return null;
        }
        
        // Helper: fetch with auto token and refresh logic
        async function authFetch(url, options = {}, isChunk = false) {
            let token = getAccessToken();
            options.headers = options.headers || {};
            if (token) {
                options.headers['Authorization'] = 'Bearer ' + token;
            }
            console.log(`token hien tai` + token)
            let res = await fetch(url, options);
            // If unauthorized and refresh token exists, try to refresh and retry
            if (res.status === 401 && getRefreshToken()) {
                token = await refreshAccessToken();
                if (token) {
                    options.headers['Authorization'] = 'Bearer ' + token;
                    // For chunk upload, need to recreate FormData (body is already read)
                    if (isChunk && options.body instanceof FormData) {
                        // Rebuild FormData
                        const oldForm = options.body;
                        const newForm = new FormData();
                        for (const [key, value] of oldForm.entries()) {
                            newForm.append(key, value);
                        }
                        options.body = newForm;
                    }
                    res = await fetch(url, options);
                }
            }
            return res;
        }
        
        // Generate upload ID
        function generateUploadId() {
            const timestamp = Date.now(); // milliseconds since epoch
            const randomPart = Math.floor(Math.random() * 1000); // 3 random digits
            return timestamp * 1000 + randomPart; // always safe (max 16 digits)
        }
        
        const CHUNK_SIZE_MB = 64;
        const CHUNK_SIZE = CHUNK_SIZE_MB * 1024 * 1024;

        //thumbnail file handling
        // Thumbnail drag & drop and preview
    const seriesThumbnailUploadArea = document.getElementById('seriesThumbnailUploadArea');
    const seriesThumbnailFileInput = document.getElementById('seriesThumbnailFile');
    const seriesThumbnailPreview = document.getElementById('seriesThumbnailPreview');
    const seriesThumbnailImg = document.getElementById('seriesThumbnailImg');

    // Click to open file dialog
    seriesThumbnailUploadArea.addEventListener('click', () => {
        seriesThumbnailFileInput.click();
    });

    // Drag & drop
    seriesThumbnailUploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        seriesThumbnailUploadArea.classList.add('dragover');
    });
    seriesThumbnailUploadArea.addEventListener('dragleave', (e) => {
        e.preventDefault();
        seriesThumbnailUploadArea.classList.remove('dragover');
    });
    seriesThumbnailUploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        seriesThumbnailUploadArea.classList.remove('dragover');
        if (e.dataTransfer.files && e.dataTransfer.files[0]) {
            seriesThumbnailFileInput.files = e.dataTransfer.files;
            showSeriesThumbnailPreview(e.dataTransfer.files[0]);
        }
    });

    // Preview on file select
    seriesThumbnailFileInput.addEventListener('change', function() {
        if (this.files && this.files[0]) {
            showSeriesThumbnailPreview(this.files[0]);
        }
    });

    function showSeriesThumbnailPreview(file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            seriesThumbnailImg.src = e.target.result;
            seriesThumbnailPreview.style.display = 'block';
        };
        reader.readAsDataURL(file);
    }
        
        async function uploadFileInChunks(file) {
            const uploadId = generateUploadId();
            const totalChunks = Math.ceil(file.size / CHUNK_SIZE);
            const total_size = file.size;

            // Get form data
            const seriesOption = document.querySelector('input[name="seriesOption"]:checked').value;
            const episodeNumber = document.getElementById('episodeNumber').value;
            const title = document.getElementById('title').value;
            
            let userId = localStorage.getItem('userId');
            let seriesId = null;
            let seriesName = null;
            let year = 'unknown';
            let country = 'unknown';
            let description = 'unknown';
            let actors = 'unknown';
            let genre = 'unknown';
            
            // Handle series data
            if (seriesOption === 'new') {
                seriesName = document.getElementById('seriesName').value;
                const seriesDescription = document.getElementById('seriesDescription').value || 'unknown';
                const totalEpisodes = document.getElementById('totalEpisodes').value;
                genre = document.getElementById('genre').value;
                year = document.getElementById('year').value || 'unknown';
                country = document.getElementById('country').value || 'unknown';
                description = document.getElementById('description').value || 'unknown';
                actors = document.getElementById('actors').value || 'unknown';
                
                // Validate total episodes
                if (!totalEpisodes || totalEpisodes < 2) {
                    alert('Series phải có ít nhất 2 tập');
                    return;
                }
                
                // For existing series, use episode description if provided
                description = document.getElementById('episodeDescription').value || 'unknown';
            
            
            for (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {
                let start = chunkIndex * CHUNK_SIZE;
                let end = Math.min(start + CHUNK_SIZE, file.size);
                let chunk = file.slice(start, end);

                let success = false;
                let attempt = 0;
               
                while (!success && attempt < 3) {
                    try {
                        const formData = new FormData();
                        formData.append('uploadId', uploadId);
                        formData.append('chunkIndex', chunkIndex);
                        formData.append('totalChunks', totalChunks);
                        formData.append('filename', file.name);
                        formData.append('chunk', chunk, file.name + `.part${chunkIndex}`);
                        
                        // Add episode info fields
                        formData.append('title', title);
                        formData.append('genre', genre);
                        formData.append('year', year);
                        formData.append('country', country);
                        formData.append('description', description);
                        formData.append('actors', actors);
                        formData.append('total_size', total_size);
                        formData.append('userId', userId);
                        formData.append('filetype', file.type);
                        formData.append('episodeNumber', episodeNumber);
                        formData.append('seriesId', seriesId);
                        formData.append('seriesName', seriesName || '');
                        formData.append('seriesOption', seriesOption);
                        
                        // Add total episodes for new series
                        if (seriesOption === 'new') {
                            formData.append('total_episodes', document.getElementById('totalEpisodes').value);
                        }

                        const response = await authFetch(window.UPLOAD_API_BASE_URL + '/api/v1/upload-temp/series-chunk', {
                            method: 'POST',
                            body: formData
                        }, true);

                        const data = await response.json();
                        if (response.ok) {
                            console.log(`Chunk ${chunkIndex} uploaded`);
                            success = true;
                        } else if (data.message === 'Chunk already uploaded') {
                            success = true;
                        } else {
                            throw new Error(data.error || 'Unknown error');
                        }
                    } catch (err) {
                        attempt++;
                        console.warn(`Retrying chunk ${chunkIndex}, attempt ${attempt}: ${err.message}`);
                        await new Promise(res => setTimeout(res, 1000 * attempt));
                    }
                }
                if (!success) {
                    await cancelUpload(userId, uploadId);
                    alert('Upload failed. Please try again later.');
                    return;
                }
            }
            
            // All chunks uploaded, now verify completion
            const completeRes = await authFetch(window.UPLOAD_API_BASE_URL + '/api/v1/upload-temp/series-complete', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    uploadId,
                    totalChunks,
                    filename: file.name,
                    filetype: file.type,
                    title,
                    genre,
                    year,
                    country,
                    description,
                    actors,
                    total_size,
                    userId,
                    episodeNumber,
                    seriesId,
                    seriesName: seriesName || '',
                    seriesOption,
                    total_episodes: seriesOption === 'new' ? document.getElementById('totalEpisodes').value : undefined
                })
            });
            
            const completeData = await completeRes.json();
            if (completeRes.ok) {
                // If thumbnail was selected, upload it now
            const thumbnailFile = thumbnailFileInput.files[0];
            //completeData.id = series id 
            if (thumbnailFile && completeData.id) {
                await uploadThumbnail(thumbnailFile, completeData.id);
            }
            
            alert('Upload complete! Video and thumbnail uploaded successfully.');
            } else {
                alert('Failed to complete upload: ' + (completeData.error || 'Unknown error'));
            }
        }
    }
        
        // Function to upload thumbnail
    async function uploadThumbnail(thumbnailFile, seriesId) {
        try {
            // Show thumbnail upload progress
            const thumbnailProgress = document.getElementById('thumbnailProgress');
            const thumbnailProgressFill = document.getElementById('thumbnailProgressFill');
            const thumbnailStatus = document.getElementById('thumbnailStatus');
            
            thumbnailProgress.style.display = 'block';
            thumbnailProgressFill.style.width = '0%';
            thumbnailStatus.textContent = 'Đang xử lý thumbnail...';
            
            const formData = new FormData();
            formData.append('thumbnail', thumbnailFile);
            formData.append('seriesId', seriesId);
            formData.append('userId', localStorage.getItem('userId'));
            
            // Simulate progress
            let progress = 0;
            const progressInterval = setInterval(() => {
                progress += Math.random() * 20;
                if (progress > 90) progress = 90;
                thumbnailProgressFill.style.width = progress + '%';
                
                if (progress < 30) {
                    thumbnailStatus.textContent = 'Đang kiểm tra file...';
                } else if (progress < 60) {
                    thumbnailStatus.textContent = 'Đang xử lý hình ảnh...';
                } else {
                    thumbnailStatus.textContent = 'Đang lưu thumbnail...';
                }
            }, 200);
            
            const response = await authFetch('/api/v1/thumbnail/series-upload', {
                method: 'POST',
                body: formData
            });
            
            clearInterval(progressInterval);
            thumbnailProgressFill.style.width = '100%';
            thumbnailStatus.textContent = 'Hoàn thành!';
            thumbnailStatus.className = 'upload-status status-success';
            
            const data = await response.json();
            if (response.ok) {
                console.log('Thumbnail uploaded successfully:', data.thumbnail.url);
                
                // Hide progress after a delay
                setTimeout(() => {
                    thumbnailProgress.style.display = 'none';
                }, 2000);
                
                return data.thumbnail;
            } else {
                console.error('Thumbnail upload failed:', data.error);
                thumbnailStatus.textContent = 'Lỗi: ' + data.error;
                thumbnailStatus.className = 'upload-status status-error';
                return null;
            }
        } catch (error) {
            console.error('Thumbnail upload error:', error);
            const thumbnailStatus = document.getElementById('thumbnailStatus');
            thumbnailStatus.textContent = 'Lỗi: ' + error.message;
            thumbnailStatus.className = 'upload-status status-error';
            return null;
        }
    }
    
    async function cancelUpload(userId, uploadId) {
        try {
            await authFetch(window.UPLOAD_API_BASE_URL + '/api/v1/upload-temp/cancelUpload', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId, uploadId })
            });
        } catch (e) {
            // Optionally log or ignore
        }
    }
        


        document.getElementById('uploadSeriesForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const fileInput = document.getElementById('videoFile');
            const file = fileInput.files[0];
            if (!file) {
                alert('Please select a file');
                return;
            }
            uploadFileInChunks(file);
        });
    </script>
</body>
</html> 