<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= movie.title %> - T·∫≠p <%= episode.number %> - Video Website</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="icon" type="image/x-icon" href="/images/favicon.ico">
    <meta name="description" content="Xem <%= movie.title %> t·∫≠p <%= episode.number %>">
    <meta name="keywords" content="<%= movie.title %>, xem phim online">
    
    <!-- Video.js CSS -->
    <link href="https://vjs.zencdn.net/8.6.1/video-js.css" rel="stylesheet" />
    <link href="https://unpkg.com/video.js@8.6.1/dist/video-js.css" rel="stylesheet" />
    
    <!-- HLS.js for HLS support -->
    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
    
    <!-- Custom Video.js Styles -->
    <style>
        .video-js {
            width: 100%;
            height: 100%;
            border-radius: 10px;
        }
        
        .vjs-control-bar {
            background: linear-gradient(transparent, rgba(0,0,0,0.8));
        }
        
        .vjs-big-play-button {
            background: rgba(255, 215, 0, 0.8);
            border: 2px solid #ffd700;
            border-radius: 50%;
            width: 80px;
            height: 80px;
            line-height: 80px;
            font-size: 40px;
            margin-left: -40px;
            margin-top: -40px;
        }
        
        .vjs-big-play-button:hover {
            background: rgba(255, 215, 0, 1);
            transform: scale(1.1);
        }
        
        .vjs-progress-control .vjs-progress-holder {
            height: 8px;
        }
        
        .vjs-progress-control .vjs-play-progress {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        
        .vjs-volume-level {
            background: #ffd700;
        }
        
        .vjs-slider:focus {
            box-shadow: 0 0 0 2px rgba(255, 215, 0, 0.5);
        }
        
        /* Mobile optimizations */
        @media (max-width: 768px) {
            .video-js {
                height: 300px;
            }
            
            .vjs-big-play-button {
                width: 60px;
                height: 60px;
                line-height: 60px;
                font-size: 30px;
                margin-left: -30px;
                margin-top: -30px;
            }
        }
        
        /* Loading animation */
        .video-loading {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
            color: #888;
        }
        
        .loading-spinner {
            border: 3px solid #333;
            border-top: 3px solid #ffd700;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin-right: 15px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .episode-btn {
            display: inline-block;
            margin: 0 4px 8px 0;
            padding: 8px 14px;
            border-radius: 6px;
            background: #222;
            color: #ffd700;
            text-decoration: none;
            font-weight: 500;
            border: 1px solid #444;
            transition: background 0.2s, color 0.2s;
        }
        .episode-btn:hover {
            background: #ffd700;
            color: #222;
        }
        .episode-btn.active {
            background: #ffd700;
            color: #222;
            border: 2px solid #ffd700;
            font-weight: bold;
            box-shadow: 0 2px 8px rgba(255,215,0,0.15);
            cursor: default;
            pointer-events: none;
        }
    </style>
    
    <!-- Server Configuration -->
    <script>
        // Server B configuration
        window.SERVER_B_CONFIG = {
            baseUrl: '<%= process.env.NGINX_URL %>',
            hlsEndpoint: '/api/v1/stream/hls',
            segmentEndpoint: '/api/v1/stream/hls'
        };
        
        // Debug server configuration
        console.log('Server B Configuration:', window.SERVER_B_CONFIG);
    </script>
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="nav-container">
            <a href="/" class="logo">VideoWeb</a>
            <nav>
                <ul class="nav-menu">
                    <li><a href="/">Trang ch·ªß</a></li>
                    <li><a href="/movies">Phim l·∫ª</a></li>
                    <li><a href="/series">Phim b·ªô</a></li>
                    <li><a href="/ranking">X·∫øp h·∫°ng</a></li>
                    <li><a href="/search">T√¨m ki·∫øm</a></li>
                </ul>
            </nav>
            <button id="mobileMenuBtn" class="mobile-menu-btn">‚ò∞</button>
        </div>
    </header>

    <!-- Main Content -->
    <main class="player-container">
        <!-- Video Player -->
        <div class="video-player">
            <% 
            // Configure server B endpoints
            const serverBBaseUrl = process.env.NGINX_URL; // Configure your server B URL
            const videoId = movie.id;
            // Use new URL pattern: direct episode access
            let hlsUrl = `${serverBBaseUrl}/api/v1/stream/hls/${videoId}`;
            
    
            %>
            
            <video 
                id="videoPlayer" 
                class="video-js vjs-default-skin vjs-big-play-centered"
                controls 
                preload="metadata"
                data-setup='{
                    "fluid": true,
                    "responsive": true,
                    "playbackRates": [0.5, 0.75, 1, 1.25, 1.5, 2],
                    "controlBar": {
                        "children": [
                            "playToggle",
                            "volumePanel",
                            "currentTimeDisplay",
                            "timeDivider",
                            "durationDisplay",
                            "progressControl",
                            "playbackRateMenuButton",
                            "fullscreenToggle"
                        ]
                    }
                }'
            >
                <source src="<%= hlsUrl %>" type="application/x-mpegURL">
                <p class="vjs-no-js">
                    ƒê·ªÉ xem video n√†y, vui l√≤ng b·∫≠t JavaScript v√† s·ª≠ d·ª•ng tr√¨nh duy·ªát h·ªó tr·ª£ HTML5 video.
                </p>
            </video>
        </div>

        <!-- Player Controls -->
        <div class="player-controls">
            <div class="player-nav">
                <% if (episode.number > 1) { %>
                    <a href="/player/<%= movie.id %>/<%= episode.number - 1 %>" 
                       class="nav-btn" 
                       id="prevEpisode" 
                       data-current="<%= episode.number %>" 
                       data-movie="<%= movie.id %>">
                        ‚Üê T·∫≠p tr∆∞·ªõc
                    </a>
                <% } %>
                
                <a href="<%= movie.type === 'series' ? '/series/' : '/movie/' %><%= movie.id %>" class="nav-btn">
                    üìã Chi ti·∫øt phim
                </a>
                
                <% if (episode.number < movie.totalEpisodes) { %>
                    <a href="/player/<%= movie.id %>/<%= episode.number + 1 %>" 
                       class="nav-btn" 
                       id="nextEpisode" 
                       data-current="<%= episode.number %>" 
                       data-total="<%= movie.totalEpisodes %>" 
                       data-movie="<%= movie.id %>">
                        T·∫≠p ti·∫øp ‚Üí
                    </a>
                <% } %>
            </div>
            
            <div style="display: flex; gap: 1rem; align-items: center;">
                <span style="color: #888;">
                    T·∫≠p <%= episode.number %><% if (movie.totalEpisodes) { %> / <%= movie.totalEpisodes %><% } %>
                </span>
                <button onclick="toggleFullscreen()" class="nav-btn">‚õ∂ To√†n m√†n h√¨nh</button>
            </div>
        </div>

        <!-- Episode List (for series) -->
        <div id="episode-list-section" style="margin-top: 2rem; display: none;">
            <h3 style="color: #ffd700; margin-bottom: 1rem;">Danh s√°ch t·∫≠p</h3>
            <div class="episode-list" style="grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));"></div>
        </div>

        <!-- Movie Info -->
        <div id="movieInfo" style="margin-top: 2rem; padding: 1rem; background: #1a1a1a; border-radius: 10px; display: none;">
            <h3 id="movieTitle" style="color: #ffd700; margin-bottom: 1rem;"></h3>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; color: #888;">
                <div>
                    <p><strong>NƒÉm:</strong> <span id="movieYear"></span></p>
                    <p><strong>Th·ªÉ lo·∫°i:</strong> <span id="movieGenre"></span></p>
                    <p><strong>ƒêi·ªÉm ƒë√°nh gi√°:</strong> <span style="color: #ffd700;">‚òÖ <span id="movieRating"></span></span></p>
                </div>
                <div>
                    <p><strong>Th·ªùi l∆∞·ª£ng:</strong> <span id="movieDuration"></span></p>
                    <p><strong>Qu·ªëc gia:</strong> <span id="movieCountry"></span></p>
                </div>
            </div>
            <p id="movieDescription" style="margin-top: 1rem; line-height: 1.6;"></p>
        </div>
    </main>

    <!-- Footer -->
    <footer style="background: #1a1a1a; padding: 2rem 0; margin-top: 3rem; text-align: center; color: #888;">
        <div style="max-width: 1200px; margin: 0 auto; padding: 0 20px;">
            <p>&copy; 2025 Video Website. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
            <p style="margin-top: 1rem; font-size: 0.9rem;">
                Website ch·ªâ ph·ª•c v·ª• m·ª•c ƒë√≠ch gi·∫£i tr√≠. Ch√∫ng t√¥i kh√¥ng s·ªü h·ªØu b·∫•t k·ª≥ n·ªôi dung video n√†o.
            </p>
        </div>
    </footer>

    <!-- Video.js JavaScript -->
    <script src="https://vjs.zencdn.net/8.6.1/video.min.js"></script>
    <script src="/js/main.js"></script>
    <script>
        // Sample data for demonstration
        if (typeof movie === 'undefined') {
            window.movie = {
                id: 1,
                title: "Thunderbolts*",
                year: 2025,
                duration: "2h 15m",
                genre: "H√†nh ƒë·ªông",
                country: "M·ªπ",
                rating: 8.5,
                views: 1200000,
                type: "movie",
                totalEpisodes: 1,
                description: "Thunderbolts* l√† m·ªôt b·ªô phim si√™u anh h√πng c·ªßa Marvel Studios, k·ªÉ v·ªÅ m·ªôt nh√≥m c√°c nh√¢n v·∫≠t ph·∫£n di·ªán ƒë∆∞·ª£c tuy·ªÉn m·ªô ƒë·ªÉ th·ª±c hi·ªán c√°c nhi·ªám v·ª• nguy hi·ªÉm cho ch√≠nh ph·ªß.",
                episodeButtons: []
            };
        }
        
        if (typeof episode === 'undefined') {
            window.episode = {
                number: 1,
                videoUrl: null
            };
        }

        // Initialize Video.js player with HLS support
        document.addEventListener('DOMContentLoaded', function() {
            const videoElement = document.getElementById('videoPlayer');
            if (videoElement && typeof videojs !== 'undefined') {
                const player = videojs('videoPlayer', {
                    fluid: true,
                    responsive: true,
                    preload: 'metadata',
                    playbackRates: [0.5, 0.75, 1, 1.25, 1.5, 2],
                    controlBar: {
                        children: [
                            'playToggle',
                            'volumePanel',
                            'currentTimeDisplay',
                            'timeDivider',
                            'durationDisplay',
                            'progressControl',
                            'playbackRateMenuButton',
                            'fullscreenToggle'
                        ]
                    }
                });

                // Configure HLS support
                const serverBBaseUrl = window.SERVER_B_CONFIG.baseUrl;
                const videoId = '<%= movie.id %>';
                const episodeNumber = '<%= episode.number %>';
                // Use new URL pattern: direct episode access
                let hlsUrl;
                if (episodeNumber && episodeNumber !== '1') {
                    // For series episodes, use /videoId/episodeNumber
                    hlsUrl = `${serverBBaseUrl}${window.SERVER_B_CONFIG.hlsEndpoint}/${videoId}/${episodeNumber}`;
                } else {
                    // For movies or first episodes, use just /videoId
                    hlsUrl = `${serverBBaseUrl}${window.SERVER_B_CONFIG.hlsEndpoint}/${videoId}`;
                }
                
                // Debug HLS URL construction
                console.log('HLS URL Debug:', {
                    serverBBaseUrl,
                    videoId,
                    episodeNumber,
                    hlsUrl,
                    fullUrl: hlsUrl
                });

                // Check if HLS is supported natively
                if (videoElement.canPlayType('application/vnd.apple.mpegurl')) {
                    // Native HLS support (Safari)
                    player.src({
                        src: hlsUrl,
                        type: 'application/x-mpegURL'
                    });
                } else if (Hls.isSupported()) {
                    // HLS.js support for other browsers
                    const hls = new Hls({
                        debug: false,
                        enableWorker: true,
                        lowLatencyMode: true,
                        backBufferLength: 90
                    });
                    
                    hls.loadSource(hlsUrl);
                    hls.attachMedia(videoElement);
                    
                    // Handle HLS events
                    hls.on(Hls.Events.MANIFEST_PARSED, function() {
                        console.log('HLS manifest loaded successfully');
                        console.log('Streaming from:', hlsUrl);
                    });
                    
                    hls.on(Hls.Events.MANIFEST_LOADING, function() {
                        console.log('HLS manifest loading started');
                        console.log('Loading manifest from:', hlsUrl);
                    });
                    
                    hls.on(Hls.Events.MANIFEST_LOADED, function(event, data) {
                        console.log('HLS manifest loaded with', data.levels.length, 'quality levels');
                        console.log('Available quality levels:', data.levels.map(level => `${level.width}x${level.height}@${level.bitrate}`));
                    });
                    
                    hls.on(Hls.Events.ERROR, function(event, data) {
                        console.error('HLS error:', data);
                        console.error('Error details:', {
                            type: data.type,
                            details: data.details,
                            fatal: data.fatal,
                            url: data.url
                        });
                        
                        if (data.fatal) {
                            switch(data.type) {
                                case Hls.ErrorTypes.NETWORK_ERROR:
                                    console.error('Network error, trying to recover...');
                                    hls.startLoad();
                                    break;
                                case Hls.ErrorTypes.MEDIA_ERROR:
                                    console.error('Media error, trying to recover...');
                                    hls.recoverMediaError();
                                    break;
                                default:
                                    console.error('Fatal error, destroying player');
                                    hls.destroy();
                                    break;
                            }
                        }
                    });
                    
                    // Handle segment loading for analytics
                    hls.on(Hls.Events.FRAG_LOADED, function(event, data) {
                        // Track segment loading for analytics
                        console.log('Segment loaded:', data.frag.url);
                        
                        // You can send segment loading data to your analytics server here
                        // fetch('/api/analytics/segment-loaded', {
                        //     method: 'POST',
                        //     headers: { 'Content-Type': 'application/json' },
                        //     body: JSON.stringify({
                        //         videoId: videoId,
                        //         episodeNumber: episodeNumber,
                        //         segmentUrl: data.frag.url,
                        //         timestamp: new Date().toISOString()
                        //     })
                        // });
                    });
                    
                    // Handle manifest loading
                    hls.on(Hls.Events.MANIFEST_LOADED, function(event, data) {
                        console.log('Manifest loaded with', data.levels.length, 'quality levels');
                    });
                } else {
                    console.error('HLS is not supported in this browser');
                    // Show error message
                    const errorDiv = document.createElement('div');
                    errorDiv.innerHTML = `
                        <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; color: #888;">
                            <div style="font-size: 4rem; margin-bottom: 1rem;">‚ö†Ô∏è</div>
                            <h3>Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£</h3>
                            <p>Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ph√°t video HLS. Vui l√≤ng s·ª≠ d·ª•ng tr√¨nh duy·ªát kh√°c.</p>
                        </div>
                    `;
                    player.el().appendChild(errorDiv);
                }

                // Enhanced keyboard shortcuts for Video.js
                document.addEventListener('keydown', function(e) {
                    if (!player) return;
                    
                    switch(e.code) {
                        case 'Space':
                            e.preventDefault();
                            if (player.paused()) {
                                player.play();
                            } else {
                                player.pause();
                            }
                            break;
                        case 'ArrowLeft':
                            e.preventDefault();
                            player.currentTime(player.currentTime() - 10);
                            break;
                        case 'ArrowRight':
                            e.preventDefault();
                            player.currentTime(player.currentTime() + 10);
                            break;
                        case 'ArrowUp':
                            e.preventDefault();
                            const newVolumeUp = Math.min(1, player.volume() + 0.1);
                            player.volume(newVolumeUp);
                            break;
                        case 'ArrowDown':
                            e.preventDefault();
                            const newVolumeDown = Math.max(0, player.volume() - 0.1);
                            player.volume(newVolumeDown);
                            break;
                        case 'KeyF':
                            e.preventDefault();
                            if (player.isFullscreen()) {
                                player.exitFullscreen();
                            } else {
                                player.requestFullscreen();
                            }
                            break;
                        case 'KeyM':
                            e.preventDefault();
                            player.muted(!player.muted());
                            break;
                    }
                });

                // Auto-play next episode
                player.on('ended', function() {
                    const nextBtn = document.getElementById('nextEpisode');
                    if (nextBtn) {
                        setTimeout(() => {
                            if (confirm('T·ª± ƒë·ªông chuy·ªÉn sang t·∫≠p ti·∫øp theo?')) {
                                window.location.href = nextBtn.href;
                            }
                        }, 3000);
                    }
                });

                // Track video progress for analytics
                player.on('timeupdate', function() {
                    const currentTime = player.currentTime();
                    const duration = player.duration();
                    const progress = (currentTime / duration) * 100;
                    
                    // Send progress to server (if needed)
                    // console.log('Video progress:', progress.toFixed(1) + '%');
                });

                // Handle video errors
                player.on('error', function() {
                    console.error('Video playback error');
                    // Show error message to user
                    const errorDiv = document.createElement('div');
                    errorDiv.innerHTML = `
                        <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; color: #888;">
                            <div style="font-size: 4rem; margin-bottom: 1rem;">‚ö†Ô∏è</div>
                            <h3>L·ªói ph√°t video</h3>
                            <p>Kh√¥ng th·ªÉ ph√°t video n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.</p>
                        </div>
                    `;
                    player.el().appendChild(errorDiv);
                });

                // Mobile optimizations
                if (window.innerWidth <= 768) {
                    player.fluid(true);
                    player.responsive(true);
                }

                // Performance optimizations
                player.ready(function() {
                    // Preload next episode if available
                    const nextEpisode = document.getElementById('nextEpisode');
                    if (nextEpisode) {
                        // Preload next episode metadata
                        const link = document.createElement('link');
                        link.rel = 'prefetch';
                        link.href = nextEpisode.href;
                        document.head.appendChild(link);
                    }
                });

            } else {
                // Fallback for when Video.js is not available
                console.log('Video.js not available, using native HTML5 video');
            }
        });

        // Fullscreen functionality (fallback)
        function toggleFullscreen() {
            const player = videojs.getPlayer('videoPlayer');
            if (player) {
                if (player.isFullscreen()) {
                    player.exitFullscreen();
                } else {
                    player.requestFullscreen();
                }
            }
        }

        // Fetch and display movie metadata
        async function loadMovieMetadata() {
            try {
                const videoId = '<%= movie.id %>';
                
                // Use simplified URL pattern: just /videoId
                const metadataUrl = `/api/v1/metadata/mini-metadata-for-player/${videoId}`;
                
                const response = await fetch(metadataUrl);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                const metadata = data.metadata;
                
                // Update movie info section
                document.getElementById('movieTitle').textContent = metadata.title;
                document.getElementById('movieYear').textContent = metadata.year;
                document.getElementById('movieGenre').textContent = metadata.genre;
                document.getElementById('movieRating').textContent = metadata.rating;
                document.getElementById('movieDuration').textContent = metadata.duration;
                document.getElementById('movieCountry').textContent = metadata.country;
                document.getElementById('movieDescription').textContent = metadata.description;
                
                // Show the movie info section
                document.getElementById('movieInfo').style.display = 'block';
                
                // Update page title
                const episodeText = metadata.episode ? ` - T·∫≠p ${metadata.episode.number}` : '';
                document.title = `${metadata.title}${episodeText} - Video Website`;
                
                // Update episode buttons if it's a series
                console.log('Metadata type:', metadata.type);
                console.log('Episode buttons:', metadata.episodeButtons);
                console.log('Episode buttons length:', metadata.episodeButtons?.length);
                
                if (metadata.type === 'series' && metadata.episodeButtons && metadata.episodeButtons.length > 0) {
                    console.log('Updating episode buttons...');
                    updateEpisodeButtons(metadata.episodeButtons);
                } else {
                    console.log('No episode buttons to update');
                }
                
                console.log('Movie metadata loaded successfully:', metadata);
                
            } catch (error) {
                console.error('Error loading movie metadata:', error);
                // Show fallback info
                document.getElementById('movieInfo').style.display = 'block';
                document.getElementById('movieTitle').textContent = 'Th√¥ng tin phim';
                document.getElementById('movieDescription').textContent = 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin phim. Vui l√≤ng th·ª≠ l·∫°i sau.';
            }
        }
        
        // Update episode buttons dynamically
        function updateEpisodeButtons(episodeButtons) {
            console.log('updateEpisodeButtons called with:', episodeButtons);
            const episodeList = document.querySelector('.episode-list');
            const episodeSection = document.getElementById('episode-list-section');
            console.log('episodeList element found:', episodeList ? 'yes' : 'no');
            
            if (!episodeList) {
                console.log('No episode list element found');
                return;
            }
            episodeList.innerHTML = '';
            console.log('Cleared episode list');
            episodeButtons.forEach(ep => {
                console.log('Creating button for episode:', ep);
                const episodeBtn = document.createElement('a');
                episodeBtn.href = ep.playerUrl;
                episodeBtn.className = `episode-btn ${ep.isCurrentEpisode ? 'active' : ''}`;
                episodeBtn.setAttribute('data-episode', ep.number);
                episodeBtn.setAttribute('data-video', ep.videoId);
                episodeBtn.textContent = ep.number;
                episodeList.appendChild(episodeBtn);
                console.log('Added episode button:', ep.number);
            });
            console.log('Total episode buttons added:', episodeList.children.length);
            // Show the section if there are buttons
            if (episodeButtons.length > 0 && episodeSection) {
                episodeSection.style.display = '';
            }
        }

        // Load metadata when page loads
        document.addEventListener('DOMContentLoaded', function() {
            loadMovieMetadata();
        });
      
    </script>
</body>
</html> 